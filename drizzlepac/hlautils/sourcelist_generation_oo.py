#!/usr/bin/env python

"""This script contains code to support creation of photometric sourcelists using two techniques: aperture photometry
segmentation-map based photometry.
"""
import pdb
import sys


from astropy.io import fits
from astropy.stats import mad_std
import numpy as np
from photutils import aperture_photometry, CircularAperture, DAOStarFinder
from stsci.tools import logutil

from drizzlepac import util
from drizzlepac.hlautils import se_source_generation

__taskname__ = 'sourcelist_generation_oo'

log = logutil.create_logger(__name__, level=logutil.logging.INFO, stream=sys.stdout)


# ----------------------------------------------------------------------------------------------------------------------

class Point_source_photometry(object):
    """Using aperture photometry, generate photometric sourcelist for specified image(s).
    """
    def __init__(self):
        self.label="Point_source_photometry"
        self.description="A set of routines to generate photometric sourcelists using aperture photometry"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    def identify_sources(self,fitsfile,sourcelist_filename,make_region_file=False,dao_fwhm=3.5,bkgsig_sf=2.):
        """Create a master coordinate list of sources identified in the specified total detection product image

        Parameters
        ----------
        fitsfile : string
            Name of the drizzle-combined filter product to used to generate photometric sourcelists.

        sourcelist_filename : string
            Name of optionally generated ds9-compatible region file

        dao_fwhm : float
            (photutils.DAOstarfinder param 'fwhm') The full-width half-maximum (FWHM) of the major axis of the
            Gaussian kernel in units of pixels. Default value = 3.5.

        make_region_file : Boolean
            Generate ds9-compatible region file? Default value = True

        bkgsig_sf : float
            multiplictive scale factor applied to background sigma value to compute DAOfind input parameter
            'threshold'. Default value = 2.

        Returns
        -------
        sources : astropy table
            Table containing x, y coordinates of identified sources
        """
        hdulist = fits.open(fitsfile)
        image = hdulist['SCI'].data
        image -= np.nanmedian(image)
        bkg_sigma = mad_std(image, ignore_nan=True)
        daofind = DAOStarFinder(fwhm=dao_fwhm, threshold=bkgsig_sf * bkg_sigma)
        sources = daofind(image)
        hdulist.close()

        for col in sources.colnames:
            sources[col].info.format = '%.8g'  # for consistent table output

        # Write out ecsv file
        tbl_length = len(sources)
        sources.write(sourcelist_filename, format="ascii.ecsv")
        log.info("Created coord list  file '{}' with {} sources".format(sourcelist_filename, tbl_length))

        if make_region_file:
            out_table = sources.copy()
            # Remove all other columns besides xcentroid and ycentroid
            out_table.keep_columns(['xcentroid','ycentroid'])

            # Add offset of 1.0 in X and Y to line up sources in region file with image displayed in ds9.
            out_table['xcentroid'].data[:] += np.float64(1.0)
            out_table['ycentroid'].data[:] += np.float64(1.0)

            reg_filename = sourcelist_filename.replace(".ecsv",".reg")
            out_table.write(reg_filename, format="ascii")
            log.info("Created region file '{}' with {} sources".format(reg_filename, len(out_table)))

        return(sources)


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    def perform_photometry(self,fitsfile,sl_filename,sources,aper_radius=4.,make_region_file=False):
        """Perform aperture photometry on identified sources

        Parameters
        ----------
        fitsfile : string
            Name of the drizzle-combined filter product to used to generate photometric sourcelists.

        sl_filename : string
            Name of the sourcelist file that will be generated by this subroutine

        sources : astropy table
            Table containing x, y coordinates of identified sources

        aper_radius : float
            Aperture radius (in pixels) used for photometry. Default value = 4.

        make_region_file : Boolean
            Generate ds9-compatible region file(s) along with the sourcelist? Default value = False

        Returns
        -------
        Nothing.
        """
        # Open and background subtract image
        hdulist = fits.open(fitsfile)
        image = hdulist['SCI'].data
        image -= np.nanmedian(image)


        # Aperture Photometry
        positions = (sources['xcentroid'], sources['ycentroid'])
        apertures = CircularAperture(positions, r=aper_radius)
        phot_table = aperture_photometry(image, apertures)

        for col in phot_table.colnames: phot_table[col].info.format = '%.8g'  # for consistent table output
        hdulist.close()

        # Write out sourcelist
        tbl_length = len(phot_table)
        phot_table.write(sl_filename, format="ascii.ecsv")
        log.info("Created sourcelist file '{}' with {} sources".format(sl_filename, tbl_length))

        # Write out ds9-compatable .reg file
        if make_region_file:
            reg_filename = sl_filename.replace(".ecsv",".reg")
            out_table = phot_table.copy()
            out_table['xcenter'].data = out_table['xcenter'].data + np.float64(1.0)
            out_table['ycenter'].data = out_table['ycenter'].data + np.float64(1.0)
            out_table.remove_column('id')
            out_table.write(reg_filename, format="ascii")
            log.info("Created region file '{}' with {} sources".format(reg_filename, tbl_length))



# ----------------------------------------------------------------------------------------------------------------------


class Segment_photometry(object):
    """Create the Sextractor-like source catalog using PhotUtils"""

    def __init__(self):
        self.label = "Segment_photometry"
        self.description ="A set of routines to generate photometric sourcelists using segment maps"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    def placeholder(self):
        pass

# ----------------------------------------------------------------------------------------------------------------------


if __name__ == '__main__':
    blarg = Point_source_photometry()
    pdb.set_trace()